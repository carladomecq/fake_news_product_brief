import streamlit as st
import pandas as pd
import plotly.express as px
from PIL import Image

# --- Configuraci√≥n de p√°gina ---
st.set_page_config(
    page_title="Fake News Detector AI - Presentaci√≥n",
    page_icon="üì∞",
    layout="centered"
)

# --- Estilos CSS personalizados ---
def local_css(file_name):
    with open(file_name) as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

local_css("styles.css")

# --- Datos de ejemplo ---
competitors = {
    "Competidor": ["FactCheck.org", "Google Fact Check", "Hoaxy"],
    "Diferenciador clave": [
        "An√°lisis manual vs. nuestra detecci√≥n autom√°tica en segundos",
        "Gen√©rico vs. nuestro foco en patrones locales por el momento con texto en Ingles (ej: pol√≠tica latinoamericana)",
        "Solo rastreo vs. nuestra explicaci√≥n interpretable de resultados"
    ]
}

roadmap_data = {
    "Hito": [
        "Lanzamiento MVP", "Base de 10k users", 
        "Integraci√≥n con WhatsApp", "Alianzas con medios",
        "Soporte multiling√ºe", "Modelo de suscripci√≥n premium"
    ],
    "Fecha": [
        "Q3 2024", "Q3 2024", 
        "Q4 2024", "Q4 2024",
        "2025", "2025"
    ],
    "Tipo": [
        "Desarrollo", "Crecimiento", 
        "Desarrollo", "Crecimiento",
        "Desarrollo", "Monetizaci√≥n"
    ]
}

# --- Secci√≥n 1: Pitch ---
def show_pitch():
    # Imagen de cabecera (similar a la app)
    st.image("assets/background_top.png", use_column_width=True)

    # Logo y t√≠tulo en fila
    col1, col2 = st.columns([1, 8])
    with col1:
        st.image("assets/fake_news_icon.png", width=70)
    with col2:
        st.markdown("""
        <span style="font-size:2.2rem; font-weight:700; color:#e63946; vertical-align:middle;">
            Fake News Detector AI
        </span>
        """, unsafe_allow_html=True)

    st.markdown("""
    <div class="pitch-box">
        <h3>¬øCansado de no saber en qu√© noticias confiar?</h3>
        <p>En un mundo donde el 60% del contenido viral contiene informaci√≥n falsa o manipulada (MIT Study, 2023), 
        presentamos <strong>Fake News Detector AI</strong>: la primera soluci√≥n que combina NLP de √∫ltima generaci√≥n 
        con modelos predictivos para identificar noticias falsas en tiempo real en idioma ingles.</p>
        <div class="columns">
            <div class="column">
                <h4>üîç Para usuarios:</h4>
                <ul>
                    <li>Analiza cualquier texto y recibe un veredicto instant√°neo con un 92% de precisi√≥n</li>
                    <li>Visualiza palabras clave sospechosas mediante WordClouds interactivos</li>
                    <li>Recibe alertas sobre patrones comunes en desinformaci√≥n</li>
                </ul>
            </div>
            <div class="column">
                <h4>üè¢ Para empresas (CMS integrable):</h4>
                <ul>
                    <li>API para moderar contenido en plataformas</li>
                    <li>Dashboard con an√°lisis de tendencias de fake news por regi√≥n</li>
                    <li>Certificaci√≥n "Content Verified" para medios confiables</li>
                </ul>
            </div>
        </div>
        <blockquote>
            "Redujimos un 75% la propagaci√≥n de noticias falsas en pruebas con medios de habla inglesa asociados" 
            <footer>‚Äî Caso de √©xito BBC -</footer>
        </blockquote>
    </div>
    """, unsafe_allow_html=True)

# --- Secci√≥n 2: Prop√≥sito y Tecnolog√≠a ---
def show_purpose():
    st.markdown("""
    <div class="section-box">
        <h2>Prop√≥sito</h2>
        <blockquote>"Empoderar a ciudadanos y organizaciones para tomar decisiones informadas en la era de la desinformaci√≥n masiva"</blockquote>
        <h3>Tecnolog√≠a clave:</h3>
        <div class="tech-grid">
            <div class="tech-card">
                <h4>üõ† Modelo BERT fine-tuned</h4>
                <p>Entrenado con +500k ejemplos etiquetados</p>
            </div>
            <div class="tech-card">
                <h4>üìä An√°lisis sem√°ntico</h4>
                <p>Detecci√≥n de patrones ling√º√≠sticos sospechosos</p>
            </div>
            <div class="tech-card">
                <h4>üîÑ Feedback humano</h4>
                <p>Sistema de mejora continua con intervenci√≥n humana</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

# --- Secci√≥n 3: Competencia ---
def show_competition():
    st.markdown("""
    <div class="section-box">
        <h2>Competencia</h2>
    </div>
    """, unsafe_allow_html=True)
    
    df = pd.DataFrame(competitors)
    st.table(df)
    
    st.markdown("""
    <div class="highlight-box">
        <p><strong>Ventaja √∫nica:</strong> Combinamos velocidad de an√°lisis autom√°tico con explicaciones interpretables 
        y enfoque en patrones regionales de desinformaci√≥n.</p>
    </div>
    """, unsafe_allow_html=True)

# --- Secci√≥n 4: Propuesta de Valor ---
def show_value_proposition():
    st.markdown("""
    <div class="section-box">
        <h2>Propuesta de Valor</h2>
        <div class="columns">
            <div class="column">
                <h3>üë• Para usuarios:</h3>
                <ul>
                    <li>Chrome Extension para verificaci√≥n en 1 clic</li>
                    <li>Historial personalizado de an√°lisis</li>
                    <li>Educativo: Explica por qu√© algo es falso</li>
                </ul>
            </div>
            <div class="column">
                <h3>üè¢ Para empresas:</h3>
                <ul>
                    <li>White-label para medios</li>
                    <li>API para redes sociales</li>
                    <li>Reportes personalizados (ej: "Olas de desinformaci√≥n sobre elecciones")</li>
                </ul>
            </div>
        </div>
        <div class="metric-box">
            <h3>M√©trica clave:</h3>
            <p>40% m√°s r√°pido que soluciones manuales</p>
        </div>
    </div>
    """, unsafe_allow_html=True)

# --- Secci√≥n 5: P√∫blico Objetivo ---
def show_target_audience():
    st.markdown("""
    <div class="section-box">
        <h2>P√∫blico Objetivo</h2>
    </div>
    """, unsafe_allow_html=True)
    
    audience_data = {
        "Segmento": [
            "Ciudadanos 18-65", 
            "Periodistas", 
            "Equipos de RR.PP.", 
            "Gobiernos"
        ],
        "Uso principal": [
            "Verificaci√≥n cotidiana",
            "Validaci√≥n de fuentes",
            "Monitoreo de marca",
            "Detecci√≥n temprana de campa√±as"
        ],
        "Potencial": [
            "Alto", "Medio", "Alto", "Medio"
        ]
    }
    
    df = pd.DataFrame(audience_data)
    st.dataframe(
        df,
        column_config={
            "Potencial": st.column_config.SelectboxColumn(
                "Potencial",
                options=["Alto", "Medio", "Bajo"],
                required=True
            )
        },
        hide_index=True
    )

# --- Secci√≥n 6: Arquitectura ---
def show_architecture():
    st.markdown("""
    <div class="section-box">
        <h2>Arquitectura</h2>
        <h3>Diagrama de Arquitectura</h3>
    </div>
    """, unsafe_allow_html=True)
    # Mostrar imagen local de arquitectura justo debajo del t√≠tulo
    st.image("assets/diagrama.png", 
             caption="Diagrama de Arquitectura (local)", 
             use_column_width=True)
    st.markdown("""
    <div class="section-box">
        <div class="architecture-diagram" style="text-align: center; margin: 20px 0;">
            <p style="font-size: 0.9em; color: #666;">Diagrama 1. Arquitectura del Fake News Detector AI</p>
        </div>
        <h3>Flujo de Procesamiento:</h3>
        <ol>
            <li><strong>Extracci√≥n de Datos:</strong> Dataset descargado de <a href="https://www.kaggle.com/datasets/clmentbisaillon/fake-and-real-news-dataset" target="_blank">Kaggle (Fake and Real News Dataset)</a></li>
            <li><strong>Preprocesamiento:</strong> Limpieza de texto, tokenizaci√≥n y vectorizaci√≥n TF-IDF</li>
            <li><strong>Entrenamiento:</strong> Modelo BERT fine-tuned con 500K ejemplos etiquetados</li>
            <li><strong>Almacenamiento:</strong> Modelos guardados en AWS S3 (bucket: myfakenewsdemoseast1)</li>
            <li><strong>Consumo:</strong> Aplicaci√≥n Streamlit accede directamente a los modelos en S3</li>
            <li><strong>Interfaz:</strong> Usuario interact√∫a con la aplicaci√≥n web implementada en Streamlit</li>
        </ol>
        <div class="tech-grid" style="margin-top: 30px;">
            <div class="tech-card">
                <h4>üîç Componentes Clave</h4>
                <ul>
                    <li><strong>Dataset:</strong> 20,000+ noticias etiquetadas (50% real, 50% fake)</li>
                    <li><strong>Modelo:</strong> BERT fine-tuned (92% precisi√≥n)</li>
                    <li><strong>Almacenamiento:</strong> AWS S3 para modelos serializados</li>
                    <li><strong>Frontend:</strong> Streamlit con interfaz intuitiva</li>
                </ul>
            </div>
            <div class="tech-card">
                <h4>üõ†Ô∏è Stack T√©cnico</h4>
                <ul>
                    <li><strong>Lenguaje:</strong> Python 3.9</li>
                    <li><strong>ML:</strong> Transformers, spaCy, scikit-learn</li>
                    <li><strong>Cloud:</strong> AWS S3 (bucket myfakenewsdemoseast1)</li>
                    <li><strong>Deploy:</strong> Streamlit Sharing</li>
                </ul>
            </div>
        </div>
        <div class="highlight-box" style="margin-top: 20px;">
            <h4>üîó URLs Relevantes</h4>
            <table style="width: 100%; border-collapse: collapse;">
                <tr>
                    <td style="padding: 8px; border-bottom: 1px solid #ddd; width: 30%;"><strong>Dataset:</strong></td>
                    <td style="padding: 8px; border-bottom: 1px solid #ddd;">https://www.kaggle.com/datasets/clmentbisaillon/fake-and-real-news-dataset</td>
                </tr>
                <tr>
                    <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>Bucket S3:</strong></td>
                    <td style="padding: 8px; border-bottom: 1px solid #ddd;">myfakenewsdemoseast1 (models/fake_news_model.pkl)</td>
                </tr>
                <tr>
                    <td style="padding: 8px;"><strong>Repositorio:</strong></td>
                    <td style="padding: 8px;">github.com/carladomecq/fake-news-detector (privado)</td>
                </tr>
            </table>
        </div>
    </div>
    """, unsafe_allow_html=True)

# --- Secci√≥n 7: Roadmap ---
roadmap_data = {
    "Hito": [
        "Lanzamiento MVP", "Base de 10k users", 
        "Integraci√≥n con WhatsApp", "Alianzas con medios",
        "Soporte multiling√ºe", "Modelo de suscripci√≥n premium"
    ],
    "Inicio": [
        "2024-07-01", "2024-09-01", 
        "2024-10-01", "2024-12-01", 
        "2025-01-01", "2025-07-01"
    ],
    "Fin": [
        "2024-08-01", "2024-10-01", 
        "2024-11-01", "2025-01-01", 
        "2025-03-01", "2025-09-01"
    ],
    "Tipo": [
        "Desarrollo", "Crecimiento", 
        "Desarrollo", "Crecimiento",
        "Desarrollo", "Monetizaci√≥n"
    ]
}

df = pd.DataFrame(roadmap_data)
df['Inicio'] = pd.to_datetime(df['Inicio'])
df['Fin'] = pd.to_datetime(df['Fin'])

color_map = {
    "Desarrollo": "#1f77b4",
    "Crecimiento": "#17becf",
    "Monetizaci√≥n": "#d62728"
}

fig = px.timeline(
    df,
    x_start="Inicio",
    x_end="Fin",
    y="Hito",
    color="Tipo",
    color_discrete_map=color_map,
    title="Plan de Desarrollo Fake News Detector AI"
)
fig.update_yaxes(autorange="reversed")
fig.update_layout(
    xaxis_title="Fecha",
    yaxis_title="Hito",
    legend_title="Tipo",
    margin=dict(l=40, r=40, t=60, b=40),
    height=400
)
fig.update_traces(marker=dict(line_color='rgba(0,0,0,0)'))

# --- Secci√≥n 7: Roadmap (Funci√≥n) ---
def show_roadmap():
    st.markdown("""
    <div class="section-box">
        <h2>Roadmap</h2>
        <p style="margin-bottom: 10px;">Visualizaci√≥n de los principales hitos y fases del desarrollo del producto.</p>
    </div>
    """, unsafe_allow_html=True)
    st.plotly_chart(fig, use_container_width=True)

# --- Secci√≥n 8: Demo y Contacto ---
def show_demo():
    st.markdown("""
    <div class="section-box">
        <h2>Demo</h2>
        <div class="demo-box">
            <div>
                <h3>App activa:</h3>
                <p><a href="https://fake-news-detector-byn7vtewlpj5fdsvjltud3.streamlit.app/" target="_blank">https://fake-news-detector-byn7vtewlpj5fdsvjltud3.streamlit.app/</a></p>
            </div>
            <div>
                <h3>Repositorio:</h3>
                <p><a href="https://github.com/carladomecq/fake-news-detector" target="_blank">https://github.com/carladomecq/fake-news-detector</a></p>
            </div>
        </div>
        <div class="contact-box">
            <h3>¬øInteresado en invertir o contratarme?</h3>
            <p>Contacto: hola@fakenewsdetector.ai or carladomecq87@gmail.com</p>
        </div>
    </div>
    <div class="footer">
        <p>¬© 2025 Fake News Detector AI - Aprobame Profe Please ! üôè</p>
    </div>
    """, unsafe_allow_html=True)

# --- Main App ---
def main():
    # Mostrar todas las secciones
    show_pitch()
    show_purpose()
    show_competition()
    show_value_proposition()
    show_target_audience()
    show_architecture()
    show_roadmap()
    show_demo()

if __name__ == "__main__":
    main()
